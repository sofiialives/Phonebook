{"version":3,"file":"static/js/246.f279ed9d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactList.module.css?ae34","components/ContactsList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputName\":\"ContactForm_inputName__a8jFO\",\"buttonContacts\":\"ContactForm_buttonContacts__67UGg\",\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectError, selectItems } from 'redux/contacts/selectors';\nimport { useState } from 'react';\n\nexport function ContactForm() {\n  const error = useSelector(selectError);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectItems);\n  const dispatch = useDispatch();\n\n  const id = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const addContacts = ({ name, number }) => {\n    const isExist = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    addContacts({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      {error && 'something went wrong'}\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label htmlFor={id} className={css.label}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+$\"\n          minLength=\"3\"\n          maxLength=\"16\"\n          id={id}\n          value={name}\n          onChange={handleChange}\n          className={css.inputName}\n          required\n        />\n        <label htmlFor={id} className={css.label}>\n          Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n          title=\"xxx-xx-xx\"\n          id={id}\n          value={number}\n          onChange={handleChange}\n          className={css.inputName}\n          required\n        />\n        <button type=\"submit\" className={css.buttonContacts}>\n          +\n        </button>\n      </form>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonFilter\":\"ContactList_buttonFilter__cLakx\",\"list\":\"ContactList_list__3daws\"};","import css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMemo } from 'react';\nimport { selectItems, selectFilter, selectError } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectItems);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = useMemo(() => {\n    if (filter === '') return contacts;\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [contacts, filter]);\n\n  return (\n    <div>\n      {error && 'something went wrong'}\n      <ul className={css.list}>\n        {filteredContacts.map(contact => (\n          <li key={contact.id}>\n            <span>\n              {contact.name}: {contact.number || contact.phone}\n            </span>\n            <button\n              onClick={() => dispatch(deleteContact(contact.id))}\n              className={css.buttonFilter}\n            >\n              &#10060;\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title3\":\"Filter_title3__R4TRQ\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { selectError, selectFilter } from 'redux/contacts/selectors';\nimport css from './Filter.module.css'\n\nexport const Filter = () => {\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      {error && 'something went wrong'}\n      <h3 className={css.title3}>Find contacts by name</h3>\n      <input className={css.input}\n        type=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"Contacts_div__II7yi\",\"title\":\"Contacts_title__LxdN4\",\"title2\":\"Contacts_title2__hGGZj\"};","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <>\n      {isLoggedIn ? (\n        <div className={css.div}>\n          <h1 className={css.title}>Phonebook</h1>\n          <ContactForm />\n          <h2 className={css.title2}>Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </div>\n      ) : (\n        <Navigate to=\"/login\" />\n      )}\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","error","useSelector","selectError","useState","name","setName","number","setNumber","contacts","selectItems","dispatch","useDispatch","handleChange","e","target","value","onSubmit","evt","preventDefault","find","contact","toLowerCase","alert","newContact","addContact","addContacts","className","css","htmlFor","type","pattern","minLength","maxLength","onChange","required","title","ContactsList","filter","selectFilter","filteredContacts","useMemo","includes","map","phone","onClick","deleteContact","Filter","setFilter","isLoggedIn","selectIsLoggedIn","useEffect","fetchContacts","to"],"sourceRoot":""}